1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система має модульну будову, тобто усі сторінки веб-додатку – окремі 
модулі, в яких присутні HTML, CSS та JS-файли сторінки. Для взаємодії з 
серверною частиною системи використовується HTTP протокол та JSON формат 
транспортування даних.
Перед тим, як програмно реалізувати front-end частину, було 
проаналізовано предметну область та встановлено всі основні способи 
використання клієнтського веб-застосунку, створено UseCase діаграму, що 
описує сценарій поведінки застосунку у процесі взаємодії з його користувачами. 
UseCase діаграма наведена у додатку А. Діаграма ілюструє ключові взаємодії та 
процеси, задіяні в автоматизованій системі управління товарами/інвентарем на 
складі чи у сховищі. Вона висвітлює окремі ролі та потреби користувача, 
адміністратора та працівника в цій системі
Для написання клієнтської частини системи було використано мову 
програмування JavaScript та бібліотеку jQuery для маніпуляції DOM та обробки 
подій. 
Навігація по сторінкам реалізована шляхом використання посилань та 
перенаправлення на інші HTML-файли через document.location.href. Для 
виконання асинхронних запитів на сервер використовується об'єкт 
XMLHttpRequest.
Проєкт фронтенду було реалізовано за допомогою чистого JavaScript, 
jQuery та стандартних веб-технологій (HTML, CSS).
Система має українську та англійську локалізацію. Їх зміна відбувається 
при натисканні на відповідні написи у правому верхньому боковому меню.
Локалізація була реалізована власноруч за допомогою об'єкту arrLang та функцій 
saveLocalLang і getLocalLang.

2 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Э діаграма розгортання, яка показує взаємодію між трьома компонентами системи: бекенд-сервер, фронтенд-сервер та веб-клієнт. Ось опис цієї діаграми:
Бекенд-сервер (Back-end server):
Містить веб-API, яке відповідає за обробку запитів від інших компонентів системи.
Веб-API надає можливість доступу до бізнес-логіки та даних, зберігаючи їхню цілісність.
Фронтенд-сервер (Front-end server):
Також містить веб-API, яке відповідає за обробку запитів від клієнтського додатку.
Веб-API фронтенд-сервера може взаємодіяти з бекенд-сервером для отримання необхідних даних.
Веб-клієнт (Web-Client):
Містить веб-API, який взаємодіє з веб-API фронтенд-сервера та бекенд-сервера для отримання та відправлення даних.
Веб-клієнт виступає інтерфейсом для кінцевого користувача, через який користувач може взаємодіяти з системою.
Зв'язки:
Пунктирні стрілки між компонентами представляють виклики методів веб-API.
Веб-клієнт взаємодіє з фронтенд-сервером та бекенд-сервером через відповідні веб-API.
Ця діаграма показує розгортання компонентів системи та їхні взаємозв'язки, що є важливими для розуміння загальної архітектури системи.

3 USE-CASE ДІАГРАМА ПРЕЦЕДЕНТІВ

Є також Use-Case Diagram.
Front-end частина програмної системи має декілька видів акторів: людина, 
що є клієнтом, в інтересах якого оформити замовлення, людина, що є 
адміністратором, яка може переглянути статистику товарів, може контролювати 
температуру та вологість сховища, опрацьовувати замовлення, добавляти та 
видаляти комірку сховища. Клієнт має можливість переглядати свій аккаунт та 
редагувати його, а також він може створити замовлення, та може задати дані по 
контролю сховища.
Основні потреби для Користувача:
− Зареєструватися в системі;
− Увійти в систему;
− Оформити замовлення, вказавши вимоги;
− Відстежувати статус свого замовлення;
− Переглядати статистику/історію своїх замовленя;
− Отримувати сповіщення/оновлення про своє замовлення.
Для Адміна:
− Керувати обліковими записами користувачів (блокування тощо);
− Отримувати та опрацьовувати замовлення користувачів;
− Контролювати товари/інвентар за допомогою пристроїв ІоТ;
− Отримувати інформацію про товари/інвентар;
− Переглядати статистику та дані, пов'язані із замовленнями;
− Створювати резервні копії бази даних та відновлювати її.
Користувачі наділені можливостями користуватися застосунком 
незалежно від часу доби чи інших умов. Головними умовами забезпечення 
взаємодії користувачів з програмною системою є наявність пристрою, що здатен 
запускати клієнтську частину системи та має з’єднання мережею Інтернет.

4 ДІАГРАМА СТАНІВ

Є діаграма станів, яка відображає різні стани та переходи між ними в системі для автоматизації зберігання товарів в складських приміщеннях. Ось детальний опис діаграми:
Стани та переходи:
Початковий стан:
Відображений чорним заповненим колом у верхній частині діаграми. Це початкова точка, з якої починається виконання процесу.
Авторизація:
Стан, в якому користувач має авторизуватися. Перехід до цього стану відбувається від початкового стану.
Реєстрація:
Якщо користувач не зареєстрований, він переходить до стану "Реєстрація". Після успішної реєстрації, якщо дані коректні (registration(data is correct)), користувач повертається до стану "Авторизація".
Головна сторінка:
Після успішної авторизації (check()), користувач переходить до головної сторінки (selectMainPage()).
Перегляд сховищ:
З головної сторінки користувач може перейти до перегляду сховищ (getStoragePage()).
Можливі дії: додавання нової комори (addStoragePage()) та видалення комори (deleteStoragePage()).
Повернення до головної сторінки (exit()).
Перегляд профілю:
Користувач може перейти до перегляду профілю (getProfilePage()) з головної сторінки.
Можлива дія: редагування профілю (updateProfilePage()).
Повернення до головної сторінки (exit()).
Контроль сховищ:
Користувач може контролювати сховища (selectIOTPage()) з головної сторінки.
Повернення до головної сторінки (exit()).
Перегляд статистики:
Користувач може переглянути статистику (selectStatisticsPage()) з головної сторінки.
Повернення до головної сторінки (exit()).
Створення замовлення:
З головної сторінки користувач може перейти до створення замовлення (addProductPage()).
Повернення до головної сторінки (exit()).
Перегляд замовлень:
Користувач може переглядати замовлення (getProductPage()) з головної сторінки.
Повернення до головної сторінки (exit()).
Зміна статусу замовлення:
Користувач може змінювати статус замовлення (changeProductPage()) з головної сторінки.
Повернення до головної сторінки (exit()).
Завершальний стан:
Відображений червоним заповненим колом у нижній частині діаграми. Це кінцева точка, до якої система може прийти після виконання всіх можливих дій.
Загальна логіка:
Діаграма показує, як користувач проходить через різні стани системи, починаючи з авторизації та реєстрації, і як він може виконувати різні дії на головній сторінці, такі як перегляд і редагування профілю, контроль сховищ, перегляд статистики, створення та управління замовленнями.
Кожен стан має вихідний перехід до головної сторінки (exit()).
Ця діаграма забезпечує зрозуміле уявлення про те, як користувачі взаємодіють із системою та які стани вони можуть пройти в процесі використання системи.

5 ДІАГРАМА ПАКЕТІВ

Діаграма пакетів показує фізичну архітектуру системи - розподіл програмних компонентів по обчислювальних вузлах.
На діаграмі розгортання зображаються такі основні елементи:
Вузли (nodes) - фізичні пристрої, такі як сервери, робочі станції, принтери тощо.
Компоненти (artifacts) - виконувані програмні компоненти, такі як веб-додатки, клієнтські програми, бібліотеки.
Зв'язки (links) - зв'язки, які показують, на яких вузлах розміщені компоненти системи.
На наданій діаграмі ви можете побачити декілька вузлів: сервер (Server), пристрої (Devices) та середовища виконання (Web server, Postgresql, Application Server). На вузлах розгорнуті різні програмні компоненти системи, позначені як артефакти (User Interface, Application Artifacts).
Діаграма також показує різні середовища розгортання: Development Environment, QA Environment, System Testing Environment, Production Environment.
Тож ця діаграма не ілюструє структуру пакетів програмного забезпечення, а демонструє розподіл системи по фізичних вузлах та середовищах.

ВИСНОВКИ

У ході виконання роботи були отримані навички з розробки клієнтської частини 
програмної системи. Результатом роботи є розроблена програмна реалізація 
клієнтської частини на JavaScript з використанням бібліотеки jQuery. Локалізація
українською та англійською була реалізована власноруч за допомогою об'єкту 
arrLang та функцій saveLocalLang і getLocalLang. Навігація по сторінкам відбувається 
через посилання та перенаправлення на інші HTML-файли. Асинхронні запити на 
сервер виконуються за допомогою об'єкту XMLHttpRequest. Проект було розроблено 
з використанням чистого JavaScript, jQuery та стандартних веб-технологій (HTML, 
CSS). При розробці дотримувались принципів чистого коду та підходів до написання 
JavaScript-коду
