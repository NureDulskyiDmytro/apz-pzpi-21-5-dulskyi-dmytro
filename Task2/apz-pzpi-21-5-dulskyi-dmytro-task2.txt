1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Для написання серверної частини системи було обрано мову програмування Java 
з використанням Spring Boot для розробки серверної частини системи. 
Використовується технологія Spring Boot, популярний фреймворк для створення 
мікросервісів і веб-додатків на основі Java. Для взаємодії з реляційними базами даних 
використовується Spring Data JPA, який забезпечує об'єктно-реляційний мапінг 
(ORM). Базою даних є PostgreSQL, потужна, об'єктно-реляційна база даних з 
відкритим кодом. Для управління безпекою додатка застосовується Spring Security, а 
для аутентифікації та авторизації користувачів використовується JWT (JSON Web 
Token). Для автоматичної генерації документації API (Swagger) використовується 
Springdoc OpenAPI.
Діаграму розгортання було розподілено на вузли та компоненти та 
визначено за якими протоколами між ними передається інформація. На основі 
розподілення було створено діаграму розгортання з такими вузлами як:
− Сервер баз даних
− Веб-сервер
− Сервер додатка
− Персональний комп’ютер
− IoT-пристрій
− Мобільний пристрій

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Ми створили діаграму компонентів, яка демонструє архітектуру системи з кількома взаємодіючими компонентами. На діаграмі представлені наступні компоненти:
Мобільний пристрій (Mobile device):
Компонент: Mobile application
Протокол зв'язку: HTTP
Призначення: Використовується кінцевими користувачами для взаємодії з системою через мобільний додаток.
IoT-пристрій (IoT-device):
Компонент: IoT application
Протокол зв'язку: HTTP
Призначення: Використовується для взаємодії з системою через інтернет речей.
Сервер додатків (Application server):
Компонент: Project.exe
Операційна система: Windows
Протокол зв'язку з базою даних: TCP/IP
Протокол зв'язку з іншими компонентами: HTTP
Призначення: Виконання основних обчислювальних функцій і логіки програми.
Сервер баз даних (Database Server):
Компонент: PostgreSQL
Протокол зв'язку: TCP/IP
Призначення: Зберігання та управління даними для системи.
Веб-сервер (Web Server):
Компонент: Web application
Протокол зв'язку: HTTP
Призначення: Веб-додаток для взаємодії з кінцевими користувачами через веб-браузер.
Персональний комп'ютер (Personal Computer):
Компонент: Web-browser
Протокол зв'язку: HTTP
Призначення: Використовується кінцевими користувачами для доступу до веб-додатку.
Керівні принципи створення діаграми:
Зрозумілість: Діаграма повинна чітко демонструвати всі основні компоненти системи та їх взаємозв'язки.
Сегментація: Розділення різних типів пристроїв та серверів для кращого розуміння архітектури.
Протоколи зв'язку: Вказання протоколів зв'язку між компонентами для визначення типу взаємодії (HTTP, TCP/IP).
Призначення компонентів: Кожен компонент має своє призначення та роль у системі.
Операційна система: Вказання операційної системи для серверів, де це доречно (наприклад, Windows на сервері додатків).
Ця діаграма допомагає краще зрозуміти загальну архітектуру системи, виявити можливі місця для оптимізації та забезпечення надійного зв'язку між компонентами.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Для написання серверної частини системи було обрано мову програмування Java 
з використанням Spring Boot для розробки серверної частини системи. 
Використовується технологія Spring Boot, популярний фреймворк для створення 
мікросервісів і веб-додатків на основі Java. Для взаємодії з реляційними базами даних 
використовується Spring Data JPA, який забезпечує об'єктно-реляційний мапінг 
(ORM). Базою даних є PostgreSQL, потужна, об'єктно-реляційна база даних з 
відкритим кодом. Для управління безпекою додатка застосовується Spring Security, а 
для аутентифікації та авторизації користувачів використовується JWT (JSON Web 
Token). Для автоматичної генерації документації API (Swagger) використовується 
Springdoc OpenAPI.
Конфігурація вказана у файлі application.properties, де налаштовані параметри 
для PostgreSQL, безпеки, OpenAPI та інших сервісів.
У класі конфігурації безпеки WebSecurityConfig налаштовуються параметри 
безпеки додатку. Клас використовує компоненти JwtAuthenticationEntryPoint, 
JwtAccessDeniedHandler, та TokenProvider для обробки JWT токенів і управління 
сесіями.
Конфігурація безпеки включає в себе:
1. Додавання фільтру CorsFilter перед фільтром 
UsernamePasswordAuthenticationFilter.
2. Вказівку на обробку винятків через JwtAuthenticationEntryPoint і 
JwtAccessDeniedHandler.
3. Налаштування сесій як безстанних (stateless).
4. Авторизацію запитів на основі ролей і шляхів до ресурсів.
5. Додавання JWT конфігуратора для обробки токенів.
Контролери, такі як OrderingController, забезпечують REST API для роботи з 
сутностями "Ordering". Методи контролера захищені за допомогою 
@SecurityRequirement(name = "bearerAuth"), що вимагає наявності дійсного JWT 
токена для доступу до ресурсів. Методи включають створення, оновлення, 
видалення та отримання замовлень.
Компонент UserModelDetailsService забезпечує завантаження користувачів з 
бази даних для аутентифікації. Користувачі аутентифікуються за допомогою їхнього 
логіна або електронної пошти, а права доступу призначаються на основі ролей, 
збережених у базі даних.
Використовуючи ці технології та підходи, система забезпечує надійну та 
безпечну роботу з даними, високий рівень продуктивності та легкість у підтримці та 
розширенні функціональності.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Ми створили діаграму прецедентів (use case diagram), яка демонструє функціональність системи для автоматизації зберігання товарів в складських приміщеннях. На діаграмі представлені наступні актори та прецеденти:
Актори:
Користувач:
Може реєструватися, авторизовуватися, оформляти замовлення, забирати товар зі складу, змінювати діапазон контролю товару.
Працівник:
Контролює товар за допомогою IoT пристроїв, отримує розпорядок дня, отримує інформацію про товар.
Адміністратор (Адмін):
Має найбільші повноваження, включаючи управління користувачами (заблокувати/розблокувати користувача), приймати замовлення, змінювати статус замовлення, переглядати статистику замовлень.
Прецеденти:
Користувач:
Зареєструватися: Може зареєструвати новий обліковий запис.
Увійти: Входить в систему, включає прецедент "Авторизуватися".
Авторизуватися: Проходить процес авторизації.
Оформити замовлення: Створює нове замовлення.
Забрати товар зі складу: Відбирає товар зі складу.
Змінювати діапазон контролю товару: Змінює параметри контролю товару.
Працівник:
Контроль товару за допомогою IoT пристроїв: Використовує IoT пристрої для моніторингу товарів.
Отримати розпорядок дня: Отримує список завдань на день.
Отримати інформацію про товар: Отримує деталі про конкретні товари.
Адмін:
Заблокувати користувача: Може блокувати користувача.
Розблокувати користувача: Може розблокувати користувача.
Прийняти замовлення: Приймає створені замовлення.
Змінити статус замовлення: Змінює статус вже створеного замовлення.
Перегляд статистики замовлень: Переглядає статистичні дані про замовлення.
Керівні принципи створення діаграми:
Зрозумілість ролей: Визначення основних акторів системи та їх ролей.
Взаємодія акторів і прецедентів: Демонстрація, які дії можуть виконувати конкретні актори.
Уточнення взаємозв'язків: Використання зв'язків «include» і «extend» для уточнення відносин між прецедентами.
Зручність використання: Показ основних сценаріїв використання системи.
Ця діаграма допомагає зрозуміти, які функціональні можливості надає система різним користувачам, і як ці користувачі взаємодіють із системою для виконання своїх завдань.         

5 ПОБУДОВА ER-ДІАГРАМИ

Наведена моделює базу даних для системи управління товарами, зберіганням та замовленнями. Основні сутності, які вона містить, включають: User, Authority, User_Authority, Product, Storage, Ordering. Діаграма відображає зв’язки між цими сутностями та поля, які вони містять.
Переваги діаграми:
Чіткість та логічність структури:
Діаграма добре організована та зрозуміла. Всі сутності мають чітко визначені атрибути, що дозволяє легко розібратись у структурі бази даних.
Нормалізація даних:
Використання окремих таблиць для користувачів, авторизацій та зв'язків між ними (User, Authority, User_Authority) допомагає уникнути дублювання даних та забезпечує цілісність даних.
Забезпечення цілісності даних:
Зв’язки між таблицями забезпечують референтну цілісність. Наприклад, зв’язок між таблицями Product та Ordering гарантує, що замовлення можуть бути зроблені лише на існуючі продукти.
Гнучкість:
Додавання нових атрибутів або зв'язків в цю діаграму може бути виконане без значних змін у структурі бази даних. Це полегшує масштабування та модифікацію системи в майбутньому.
Оцінка зв’язків:
User та User_Authority:
User (Користувач) зв’язаний із User_Authority через зовнішній ключ user_id. Це дозволяє легко визначити, які авторизації мають конкретні користувачі.
Authority та User_Authority:
Authority (Авторизація) зв’язаний із User_Authority через зовнішній ключ authority_name. Це дозволяє підтримувати множинні авторизації для одного користувача.
Product та Storage:
Product (Продукт) зв’язаний із Storage (Зберігання) через зовнішній ключ product_id. Це допомагає відстежувати, де саме зберігаються продукти.
Product та Ordering:
Product (Продукт) зв’язаний із Ordering (Замовлення) через зовнішній ключ product_id. Це забезпечує цілісність даних у замовленнях.
Враховуючи наведені переваги, чіткість та логічність структури, ER-діаграма заслуговує високої оцінки. Вона добре моделює необхідну предметну область, забезпечує цілісність даних та гнучкість для майбутніх змін.

6 СПЕЦИФІКАЦІЯ REST

У створенні серверної частини було використано архітектурний стиль взаємодії 
додатків в мережі під назвою Rest API. При розробці REST API було використано 
HTTP-методи, такі як:
− GET - для отримання об'єкта або списку об'єктів;
− POST - для створення нового об'єкта;
− PUT - для повної зміни об'єкта чи приміщення об'єкта в список;
− DELETE - для видалення об'єкта.
Опис специфікації REST наведено нижче у вигляді таблиці:

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма, представлена на зображенні, моделює компонентну архітектуру проекту. Вона демонструє, як різні компоненти системи взаємодіють між собою та як вони розміщені на різних вузлах.
Основні компоненти діаграми:
Deployment Model (Модель розгортання):
Цей розділ містить основні складові моделі розгортання, включаючи вузли (Nodes), артефакти (Artifacts) та топологію (Topology).
Nodes (Вузли):
Devices (Пристрої):
Server (Сервер): Представляє основний сервер, на якому розміщуються компоненти системи.
Executing Environment (Середовище виконання):
Web server (Веб-сервер): Сервер, на якому працюють веб-додатки.
PostgreSQL: СУБД, яка використовується для зберігання даних.
Application Server (Сервер додатків): Сервер, на якому виконуються прикладні програми.
Artifacts (Артефакти):
User Interface (Користувацький інтерфейс): Компонент, що відповідає за взаємодію з користувачем.
Application Artifacts (Артефакти додатків): Інші компоненти та файли, необхідні для функціонування додатків.
Topology (Топологія):
Development Environment (Середовище розробки): IntelliJ IDEA: Середовище розробки програмного забезпечення.
QA Environment (Середовище тестування якості): Local: Локальне середовище для тестування якості програмного забезпечення.
System Testing Environment (Середовище системного тестування): Postman: Середовище для тестування API за допомогою Postman.
Production Environment (Продукційне середовище): Середовище, де запускається фінальна версія програмного забезпечення для користувачів.
Зв'язки між компонентами:
Use (Використання):
Топологія взаємодіє з артефактами через зв'язок "use", що означає використання артефактів у відповідних середовищах. Наприклад, користувацький інтерфейс та артефакти додатків використовуються в середовищах розробки, тестування та продукційного використання.

ВИСНОВКИ

У ході виконання лабораторної роботи були отримані навички з проєктування 
серверної частини програмної системи, розробки сценаріїв використання, діаграм 
розгортання та пакетів, проєктуванні бази даних. Була розроблена програмна 
реалізація серверної частини програмної системи. При розробці продукту 
дотримувались вимоги до чистого коду мови програмування Java.

ДОДАТОК А

Назва: "/api/deleteByUserID/{user_id}". Ролі: "ADMIN". Метод: DELETE. Опис: "Видалення користувача за ID"
Назва: "/api/user". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання інформації про поточного користувача"
Назва: "/api/getUser". Ролі: "ADMIN". Метод: GET. Опис: "Отримання всіх користувачів"
Назва: "/api/getUserID/{username}". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання ID користувача за username"
Назва: "/api/getUserById/{user_id}". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання користувача за ID"
Назва: "/api/register". Ролі: "Звичайний користувач". Метод: POST. Опис: "Реєстрація нового користувача"
Назва: "/api/userUpdate". Ролі: "USER, ADMIN". Метод: PUT. Опис: "Оновлення інформації користувача"
Назва: "/api/banUser/{userId}/{activated}". Ролі: "ADMIN". Метод: PUT. Опис: "Забанити або розбанити користувача"
Назва: "/api/deleteProduct/{productId}". Ролі: "ADMIN". Метод: DELETE. Опис: "Видалення продукту за ID"
Назва: "/api/getProduct". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання всіх продуктів"
Назва: "/api/getProductById/{productId}". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання продукту за ID"
Назва: "/api/getAnalise3ByArrayList". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання аналізу 3 по ArrayList"
Назва: "/api/getAnalise2ByArrayList". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання аналізу 2 по ArrayList"
Назва: "/api/getAnalise1ByArrayList". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання аналізу 1 по ArrayList"
Назва: "/api/addProduct". Ролі: "ADMIN". Метод: POST. Опис: "Додавання нового продукту"
Назва: "/api/updateStorageAddress/{productId}/{storageAddress}". Ролі: "ADMIN". Метод: PUT. Опис: "Оновлення адреси зберігання продукту"
Назва: "/api/updateProduct/{productId}". Ролі: "ADMIN". Метод: PUT. Опис: "Оновлення інформації про продукт"
Назва: "/api/updateIndicator/{productId}/{temperatureNow}/{humidityNow}/{workerId}". Ролі: "ADMIN". Метод: PUT. Опис: "Оновлення індикаторів продукту"
Назва: "/api/getProductId/{weight}/{size}/{typeOfProduct}/{quantity}/{storageLife}/{customerId}". Ролі: "ADMIN". Метод: PUT. Опис: "Отримання ID продукту за параметрами"
Назва: "/api/getProductByCustomerId/{customerId}". Ролі: "USER, ADMIN". Метод: PUT. Опис: "Отримання продуктів за ID клієнта"
Назва: "/api/deleteStorage/{addressStorageId}". Ролі: "ADMIN". Метод: DELETE. Опис: "Видалення складу за адресою"
Назва: "/api/getStorage". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання всіх складів"
Назва: "/api/getStorageById/{addressStorageId}". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання складу за адресою"
Назва: "/api/addStorage". Ролі: "ADMIN". Метод: POST. Опис: "Додавання нового складу"
Назва: "/api/updateStorage/{addressStorageId}/{status}/{productId}". Ролі: "ADMIN". Метод: PUT. Опис: "Оновлення складу за адресою"
Назва: "/api/updateStorage/{addressStorageId}". Ролі: "ADMIN". Метод: PUT. Опис: "Оновлення інформації про склад"
Назва: "/api/getStorageId/{size}". Ролі: "USER, ADMIN". Метод: PUT. Опис: "Отримання ID складу за розміром"
Назва: "/api/deleteOrdering/{orderingId}". Ролі: "ADMIN". Метод: DELETE. Опис: "Видалення замовлення за ID"
Назва: "/api/getOrdering". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання всіх замовлень"
Назва: "/api/getOrderingById/{orderingId}". Ролі: "USER, ADMIN". Метод: GET. Опис: "Отримання замовлення за ID"
Назва: "/api/addOrdering". Ролі: "USER, ADMIN". Метод: POST. Опис: "Додавання нового замовлення"
Назва: "/api/updateOrdering/{orderingId}/{status}". Ролі: "ADMIN". Метод: PUT. Опис: "Оновлення статусу замовлення"
Назва: "/api/updateOrdering/{orderingId}". Ролі: "ADMIN". Метод: PUT. Опис: "Оновлення інформації про замовлення"
Назва: "/api/getOrderingData/{orderingId}". Ролі: "USER, ADMIN". Метод: PUT. Опис: "Отримання даних замовлення за ID"
Назва: "/api/backupDB". Ролі: "ADMIN". Метод: GET. Опис: "Створення резервної копії бази даних"
Назва: "/api/restoreDB". Ролі: "ADMIN". Метод: POST. Опис: "Відновлення бази даних з резервної копії"
Назва: "/api/authenticate". Ролі: "Звичайний користувач". Метод: POST. Опис: "Аутентифікація користувача"
